def findWaitingTime(processes, n, wt):
    rt = [p[1] for p in processes]  # Copy burst time into rt[]
    complete, t = 0, 0

    while complete != n:
        eligible_processes = [(j, rt[j]) for j in range(n) if processes[j][2] <= t and rt[j] > 0]
        if not eligible_processes:
            t += 1
            continue

        short = min(eligible_processes, key=lambda x: x[1])[0]

        rt[short] -= 1
        if rt[short] == 0:
            complete += 1
            wt[short] = max(0, t + 1 - processes[short][1] - processes[short][2])

        t += 1


def findTurnAroundTime(processes, n, wt, tat):
    for i in range(n):
        tat[i] = processes[i][1] + wt[i]

def findavgTime(processes, n):
    wt = [0] * n
    tat = [0] * n

    findWaitingTime(processes, n, wt)
    findTurnAroundTime(processes, n, wt, tat)

    print("Processes Burst Time	 Waiting",
                    "Time	 Turn-Around Time")
    total_wt = 0
    total_tat = 0
    for i in range(n):
        total_wt = total_wt + wt[i]
        total_tat = total_tat + tat[i]
        print(" ", processes[i][0], "\t\t",
                processes[i][1], "\t\t",
                wt[i], "\t\t", tat[i])

    print("\nAverage waiting time = %.5f "%(total_wt /n) )
    print("Average turn around time = ", total_tat / n)

if __name__ =="__main__":

    # Process id's
    proc = [[1, 6, 1], [2, 8, 1],
            [3, 7, 2], [4, 3, 3]]
    n = 4
    findavgTime(proc, n)
